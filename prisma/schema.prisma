generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId     Int         @id @default(autoincrement()) @map("userId")
  Id         String      @unique @map("Id")
  password   String      @map("password")
  name       String      @map("name")
  email      String      @unique @map("email")
  characters Character[]

  @@map("Users")
}

model Character {
  characterId    Int         @id @default(autoincrement()) @map("characterId")
  userId         Int         @map("userId")
  name           String      @unique @map("name")
  inventorySlot  Int         @default(5) @map("inventorySlot")
  gold           Int         @default(10000) @map("gold")
  attack         Int         @default(100) @map("attack")
  str            Int         @default(10) @map("str")
  dex            Int         @default(10) @map("dex")
  int            Int         @default(10) @map("int")
  luk            Int         @default(10) @map("luk")
  user           Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  equipmentItems Equipment[]
  inventoryItems Inventory[]

  @@index([userId], map: "Character_userId_fkey")
  @@map("Character")
}

model Item {
  itemId         Int         @id @default(autoincrement()) @map("itemId")
  itemName       String      @unique @map("itemName")
  itemType       ItemType    @map("itemType")
  itemRating     String      @map("itemRating")
  attack         Int?        @map("attack")
  str            Int?        @map("str")
  dex            Int?        @map("dex")
  int            Int?        @map("int")
  luk            Int?        @map("luk")
  itemInfo       String?     @map("itemInfo") @db.Text
  itemPrice      Int?        @map("itemPrice")
  itemCode       Int         @unique @map("itemCode")

  equipmentItems Equipment[]
  inventoryItems Inventory[]

  @@map("Item")
}

model Inventory {
  inventoryId     Int       @id @default(autoincrement()) @map("inventoryId")
  userId          Int       @map("userId")
  characterId     Int       @map("characterId")
  inventoryNumber Int       @map("inventoryNumber")
  itemId          Int       @map("itemId")
  itemName        String    @map("itemName")
  itemType        ItemType  @map("itemType")
  itemCode        Int       @map("itemCode")
  attack          Int?      @map("attack")
  str             Int?      @map("str")
  dex             Int?      @map("dex")
  int             Int?      @map("int")
  luk             Int?      @map("luk")
  itemRating      String    @map("itemRating")

  character       Character @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item            Item      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@unique([characterId, inventoryNumber])
  @@index([itemId], map: "Inventory_itemId_fkey")
  @@map("Inventory")
}

model Equipment {
  equipmentId Int       @id @default(autoincrement()) @map("equipmentId")
  userId      Int       @map("userId")
  characterId Int       @map("characterId")
  itemId      Int       @map("itemId")
  itemName    String    @map("itemName")
  itemType    ItemType  @map("itemType")
  itemCode    Int       @map("itemCode")
  attack      Int?      @map("attack")
  str         Int?      @map("str")
  dex         Int?      @map("dex")
  int         Int?      @map("int")
  luk         Int?      @map("luk")
  itemRating  String    @map("itemRating")

  character   Character @relation(fields: [characterId], references: [characterId], onDelete: Cascade)
  item        Item      @relation(fields: [itemId], references: [itemId], onDelete: Cascade)

  @@unique([characterId, itemType])
  @@unique([characterId, itemId])
  @@index([itemId], map: "Equipment_itemId_fkey")
  @@map("Equipment")
}

enum ItemType {
  TYPE1
  TYPE2
  TYPE3
  TYPE4
  TYPE5
}
